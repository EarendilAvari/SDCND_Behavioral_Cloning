
#%% GET THE DATA FROM CSV FILE
# The training data for this project is generated by the Udacity's simulator and corresponds to three images from the front of the car
# and the corresponding turning angle for that images. The path to the images and the angle values are saved on the file driving_log.csv

import os
import csv
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle

samples = []
with open('TrainingDataNew/driving_log.csv') as csvfile:
    reader = csv.reader(csvfile)
    for line in reader:
        samples.append(line)

trainSamples, validationSamples = train_test_split(samples, test_size=0.2)

def generator(samples, batch_size=32, angCorrection_factor = 0.2):
    num_samples = len(samples)
    while 1: # Loop forever so the generator never terminates
        shuffle(samples)
        for offset in range(0, num_samples, batch_size):
            batch_samples = samples[offset:offset+batch_size]

            images = []
            angles = []
            for batch_sample in batch_samples:
                for i in range(3):
                    imgName = 'TrainingDataNew/IMG/'+batch_sample[i].split('/')[-1]
                    imgBGR = cv2.imread(imgName)
                    imgRGB = cv2.cvtColor(imgBGR, cv2.COLOR_BGR2RGB)
                    images.append(imgRGB)
                    if i == 0:
                        angle = float(batch_sample[3])
                    elif i == 1:
                        angle = float(batch_sample[3]) + angCorrection_factor
                    elif i == 2:
                        angle = float(batch_sample[3]) - angCorrection_factor
                    angles.append(angle)

            X_train = np.array(images)
            y_train = np.array(angles)
            yield shuffle(X_train, y_train)



#%% USING MODEL OF PROJECT 3 (TRAFFIC SIGN CLASSIFIER)
# As first model alternative for this task, the improved LeNet network used on the last project is used. Here it is programmed
# again using Keras

import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'
os.environ['QT_STYLE_OVERRIDE']='gtk2'

from keras.models import load_model
model = load_model('modelPretrained.h5')

model.summary()

#%% CALLING THE GENERATORS

BATCH_SIZE = 32
EPOCHS = 30

# compile and train the model using the generator function
trainGenerator = generator(trainSamples, batch_size=BATCH_SIZE)
validationGenerator = generator(validationSamples, batch_size=BATCH_SIZE)

#%% CALLBACKS FOR TRAINING  
from keras.callbacks import Callback, ModelCheckpoint, EarlyStopping

class LossHistory(Callback):
    def on_train_begin(self, logs={}):
        self.trainingLoss = []

    def on_batch_end(self, batch, logs={}):
        self.trainingLoss.append(logs.get('loss'))
        
## Callback to save the best model
modelCheckpoint = ModelCheckpoint(filepath = 'modelBest.h5', monitor = 'val_loss', save_best_only = True)
earlyStopper = EarlyStopping(monitor = 'val_loss', min_delta = 0.0003, patience = 5)

#%% TRAINING OF THE MODEL

model.compile(loss = 'mse', optimizer = 'adam')
datalogBatches = LossHistory()
datalogEpochs = model.fit_generator(trainGenerator, steps_per_epoch=np.ceil(len(trainSamples)/BATCH_SIZE),
                                    epochs = EPOCHS, verbose = 1, validation_data = validationGenerator, 
                                    validation_steps = np.ceil(len(validationSamples)/BATCH_SIZE), 
                                    callbacks = [datalogBatches, modelCheckpoint, earlyStopper])

#datalogEpochs = model.fit(X_train, Y_train, validation_split=0.2, shuffle = True, epochs = 20, callbacks = [datalogBatches])
model.save('model.h5')

#%%

import pickle
with open('modelDatalog.p', 'wb') as pickleFile:
    pickle.dump(datalogBatches.trainingLoss, pickleFile)
    pickle.dump(datalogEpochs.history['loss'], pickleFile)
    pickle.dump(datalogEpochs.history['val_loss'], pickleFile)